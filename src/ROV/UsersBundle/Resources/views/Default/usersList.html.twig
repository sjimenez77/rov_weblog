{% extends '::frontend_bootstrap.html.twig' %}

{% block title %}{{ 'Registered users control'|trans }}{% endblock %}

{% block body %}
	{{ parent() }}

<div class="container">
	<div class="row">
		<div class="col-lg-12">
			<h1 class="page-header">Blog <small>{{ 'Registered users control'|trans }}</small></h1>
			<ol class="breadcrumb">
				<li><a href="{{ path('home') }}">{{ 'Home'|trans }}</a></li>
				<li class="active">{{ 'Registered users control'|trans }}</li>
			</ol>
		</div>
	</div>

	<div class="row">
		<div class="col-lg-12">
			<h3>{{ 'Users list'|trans }}</h3>
			<div class="table-responsive">
				<table class="tablesorter">
					<thead>
						<tr>
							<th>{{ 'Name'|trans }}</th>
							<th>{{ 'Surname'|trans }}</th>
							<th>{{ 'Email'|trans }}</th>
							<th>{{ 'Registered'|trans }}</th>
							<th>{{ 'Address'|trans }}</th>
							<th>{{ 'City'|trans }}</th>
							<th>{{ 'Country'|trans }}</th>
							<th>{{ 'Company'|trans }}</th>
							<th>{{ 'Job'|trans }}</th>
						</tr>
					</thead>
					<tfoot>
						<tr>
							<th>{{ 'Name'|trans }}</th>
							<th>{{ 'Surname'|trans }}</th>
							<th>{{ 'Email'|trans }}</th>
							<th>{{ 'Registered'|trans }}</th>
							<th>{{ 'Address'|trans }}</th>
							<th>{{ 'City'|trans }}</th>
							<th>{{ 'Country'|trans }}</th>
							<th>{{ 'Company'|trans }}</th>
							<th>{{ 'Job'|trans }}</th>
						</tr>
						<tr>
							<th colspan="10" class="ts-pager form-horizontal">
								<button type="button" class="btn first"><i class="icon-step-backward glyphicon glyphicon-step-backward"></i></button>
								<button type="button" class="btn prev"><i class="icon-arrow-left glyphicon glyphicon-backward"></i></button>
								<span class="pagedisplay"></span> <!-- this can be any element, including an input -->
								<button type="button" class="btn next"><i class="icon-arrow-right glyphicon glyphicon-forward"></i></button>
								<button type="button" class="btn last"><i class="icon-step-forward glyphicon glyphicon-step-forward"></i></button>
								<select class="pagesize input-mini" title="{{ 'Select page size'|trans }}">
									<option selected="selected" value="10">10</option>
									<option value="20">20</option>
									<option value="30">30</option>
									<option value="40">40</option>
								</select>
								<select class="pagenum input-mini" title="{{ 'Select page number'|trans }}"></select>
							</th>
						</tr>
					</tfoot>
					<tbody>
						{% for user in users %}
						<tr>
							<td>{{ user.name }}</td>
							<td>{{ user.surname }}</td>
							<td><a href="mailto:{{ user.email }}">{{ user.email }}</a></td>
							<td>{{ user.registerDate|date('d/m/Y', 'Europe/Madrid') }}</td>
							<td>{{ user.address }}</td>
							<td>{{ user.city }}</td>
							<td>{{ user.country }}</td>
							<td>{{ user.company }}</td>
							<td>{{ user.job }}</td>
						</tr>
						{% endfor %}
					</tbody>
				</table>
			</div>

		</div>
	</div>
</div>
{% endblock %}
{% block js %}
	{# TableSorter creation #}
	{{ parent() }}
    <script type="text/javascript" src="{{ asset('bundles/rovstart/js/jquery.tablesorter.min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('bundles/rovstart/js/jquery.tablesorter.widgets.min.js') }}"></script>
    <!-- Tablesorter: optional -->
    <link rel="stylesheet" href="{{ asset('bundles/rovstart/css/jquery.tablesorter.pager.css') }}">
    <script type="text/javascript" src="{{ asset('bundles/rovstart/js/jquery.tablesorter.pager.js') }}"></script>
	<script>
	$(function() {

		$.extend($.tablesorter.themes.bootstrap, {
			// these classes are added to the table. To see other table classes available,
			// look here: http://twitter.github.com/bootstrap/base-css.html#tables
			table      : 'table table-bordered table-hover',
			caption    : 'caption',
			header     : 'bootstrap-header', // give the header a gradient background
			footerRow  : '',
			footerCells: '',
			icons      : '', // add "icon-white" to make them white; this icon class is added to the <i> in the header
			sortNone   : 'bootstrap-icon-unsorted',
			sortAsc    : 'icon-chevron-up glyphicon glyphicon-chevron-up',     // includes classes for Bootstrap v2 & v3
			sortDesc   : 'icon-chevron-down glyphicon glyphicon-chevron-down', // includes classes for Bootstrap v2 & v3
			active     : '', // applied when column is sorted
			hover      : '', // use custom css here - bootstrap class may not override it
			filterRow  : '', // filter row class
			even       : '', // odd row zebra striping
			odd        : ''  // even row zebra striping
		});

		// call the tablesorter plugin and apply the uitheme widget
		$("table").tablesorter({
			// this will apply the bootstrap theme if "uitheme" widget is included
			// the widgetOptions.uitheme is no longer required to be set
			theme : "bootstrap",
			widthFixed: true,
			headerTemplate : '{content} {icon}', // new in v2.7. Needed to add the bootstrap icon!
			// widget code contained in the jquery.tablesorter.widgets.js file
			// use the zebra stripe widget if you plan on hiding any rows (filter widget)
			widgets : [ "uitheme", "filter", "zebra" ],
			widgetOptions : {
				// using the default zebra striping class name, so it actually isn't included in the theme variable above
				// this is ONLY needed for bootstrap theming if you are using the filter widget, because rows are hidden
				zebra : ["even", "odd"],
				// reset filters button
				filter_reset : ".reset",
				// set the uitheme widget to use the bootstrap theme class names
				// this is no longer required, if theme is set
				uitheme : "bootstrap"

			},
			dateFormat : "ddmmyyyy", // set the default date format
		})
		.tablesorterPager({

			// target the pager markup - see the HTML block below
			container: $(".ts-pager"),

			// target the pager page select dropdown - choose a page
			cssGoto  : ".pagenum",

			// remove rows from the table to speed up the sort of large tables.
			// setting this to false, only hides the non-visible rows; needed if you plan to add/remove rows with the pager enabled.
			removeRows: false,

			// output string - default is '{page}/{totalPages}';
			// possible variables: {page}, {totalPages}, {filteredPages}, {startRow}, {endRow}, {filteredRows} and {totalRows}
			output: '{startRow} - {endRow} / {filteredRows} ({totalRows})'

		})
		// bind to pager events
	    .bind('pagerChange pagerComplete', function(event, options){
	    	// options = table.config.pager (pager addon)
	    	// options = table.config (pager widget) - so use options.pager.page below
	    	// c.totalPages contains the total number of pages
	    	amplia_footer();
	    });
	});
	</script>
{% endblock %}